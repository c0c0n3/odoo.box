#
# Lib functions to generate, import and encrypt secrets. At the
# moment we use Age for encryption and we only deal with passwords
# and TLS certificates. See functions below.
#

: "${BASE_DIR:=generated}"

passwords_dir="${BASE_DIR}/passwords"
certs_dir="${BASE_DIR}/certs"
age_key_file="${BASE_DIR}/age.key"


#
# Create the directories where to output all the generated files.
#
make_dirs() {
    mkdir -p "${passwords_dir}"
    mkdir -p "${certs_dir}"
}

#
# Generate an Age key (identity) to encrtypt/decrypt data.
#
make_age_key() {
    age-keygen -o "${age_key_file}"
}

#
# Encrypt the given file with `age`, using the Age key generated
# by `make_age_key`. Write the encrypted file to `${in_file}.age`,
# where `in_file` is the input file path. For instance if the input
# file path `passwords/admin`, then the encrypted file will be
# `passwords/admin.age`.
#
# Args:
# - Input file path. The path to the file to encrypt.
#
encrypt() {
    local in_file="$1"

    local recipient=$(age-keygen -y "${age_key_file}")
    age -o "${in_file}.age" -r $recipient "${in_file}"
}

#
# Given a clear-text password, output the corresponding password
# files in the passwords dir:
#
# - Clear text. A file containing the password in clear text.
# - Age. A file containing the password encrypted using `age`
#   and the `age` key automatically generated by this script.
# - SHA512. A file containing a SHA512 hash of the password
#   `chpasswd` can handle.
# - SHA512 Age. A file containing the SHA512 hash encrypted
#   using `age` and the `age` key automatically generated by
#   this script.
#
# Args:
# - File name. The name of the file where to write the clear text
#   password. Output SHA512 and Age files with the same base name
#   plus a `.sha512` and `.age` extension, respectively. For instance
#   if `admin` is the file name, then the clear text file name will
#   be `admin`, the SHA512 one will be `admin.sha512` whereas the
#   corresponding Age files will be `admin.age` and `admin.sha512.age`,
#   respectively.
# - Clear text password. The password to use. If none given, generate
#   a strong one.
#
# NOTE
# ----
# 1. SHA512 hash alternatives. See
# - https://github.com/c0c0n3/odoo.box/issues/8
#
make_password_files() {
    local file_name="$1"
    local clear_text="${2:-}"
    local base_file="${passwords_dir}/${file_name}"

    if [ -z "${clear_text}" ]; then
      clear_text=$(openssl rand -base64 16)
    fi
    echo "${clear_text}" > "${base_file}"
    openssl passwd -6 "${clear_text}" > "${base_file}.sha512"

    encrypt "${base_file}"
    encrypt "${base_file}.sha512"
}

#
# Generate a basic self-signed, 100-year valid, RSA SSL certificate
# in PEM format and put it into the certs dir. Write the public cert
# to `${domain}-cert.pem` and the private key to `${domain}-key.pem`,
# where `domain` is the domain name. Also encrypt each file with `age`
# and the Age key automatically generated by this script. Write each
# encrypted file to a file with the same name plus the `.age` extension.
#
# Args:
# - Domain name. The CN name for the certificate to generate.
#
make_cert_files() {
    local domain="$1"
    local cert="${certs_dir}/${domain}-cert.pem"
    local key="${certs_dir}/${domain}-key.pem"

    openssl req -x509 -newkey rsa:4096 -days 36500 -nodes \
        -subj "/CN=${domain}" \
        -keyout "${key}" -out "${cert}" 2> /dev/null

    encrypt "${cert}"
    encrypt "${key}"
}

#
# Copy TLS pub cert and key over to the certs dir and encrypt the key.
# Encrypt with `age` and the Age key automatically generated by this
# script. Write the encrypted key to a file with the same name plus
# the `.age` extension.
#
# Args:
# - Public certificate. Path to the certificate file.
# - Certificate key. Path to the certificate's private key file.
#
import_cert_files() {
    local cert="$1"
    local key="$2"
    local cert_basename=$(basename "${cert}")
    local key_basename=$(basename "${key}")

    cp "${cert}" "${certs_dir}/"
    cp "${key}" "${certs_dir}/"
    encrypt "${certs_dir}/${cert_basename}"
    encrypt "${certs_dir}/${key_basename}"
}
